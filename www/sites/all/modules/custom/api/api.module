<?php

define("API_VERSION", "v1");
define("DEFAULT_PAGE_LIMIT", 25);
define("MAXIMUM_PAGE_LIMIT", 100);
define("CACHE_ENABLED", TRUE);
define("CACHE_LIFETIME_SECONDS", 900);

require_once('api.admin.inc');
require_once('api.render.inc');

/**
 * Implements hook_menu().
 */
function api_menu() {

  $items["api/" . API_VERSION . "/swagger"] = array(
    'page callback' => '_api_swagger_ui',
    'access arguments' => array('administer rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/openapi.yaml"] = array(
    'page callback' => '_api_openapi',
    'access arguments' => array('administer rest api'),
    'type' => MENU_CALLBACK,
  );

  // API
  $items["api/" . API_VERSION . "/reviews"] = array(
    'page callback' => '_api_reviews',
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/reviews/%"] = array(
    'page callback' => '_api_review',
    'page arguments' => array(3),
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/concert_reviews"] = array(
    'page callback' => '_api_concert_reviews',
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/concert_reviews/%"] = array(
    'page callback' => '_api_concert_review',
    'page arguments' => array(3),
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/interviews"] = array(
    'page callback' => '_api_interviews',
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/interviews/%"] = array(
    'page callback' => '_api_interview',
    'page arguments' => array(3),
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/news"] = array(
    'page callback' => '_api_news',
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/news/%"] = array(
    'page callback' => '_api_news_story',
    'page arguments' => array(3),
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/reportages"] = array(
    'page callback' => '_api_reportages',
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/reportages/%"] = array(
    'page callback' => '_api_reportage',
    'page arguments' => array(3),
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/artists/%"] = array(
    'page callback' => '_api_artist',
    'page arguments' => array(3),
    'access arguments' => array('use rest api'),
    'type' => MENU_CALLBACK,
  );

  // Administration
  $items['admin/config/api'] = array(
    'title' => t('REST API'),
    'page callback' => '_api_keys_list',
    'access arguments' => array('administer rest api'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  $items['admin/config/api/add_api_key'] = array(
    'title' => 'Add API key',
    'description' => 'Add a new API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_add_api_key_form'),
    'access arguments' => array('administer rest api'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  $items['admin/config/api/edit_api_key/%'] = array(
    'title' => 'Edit API key',
    'description' => 'Edit an existing API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_edit_api_key_form', 4),
    'access arguments' => array('administer rest api'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  $items['admin/config/api/delete_api_key/%'] = array(
    'title' => 'Delete API key',
    'description' => 'Delete an existing API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delete_api_key_form', 4),
    'access arguments' => array('administer rest api'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  return $items;
}

function _valid_api_key() {

  if (!isset($_GET['api_key'])) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 1,
          "message" => "Invalid parameters. Your request is missing a required parameter."
        )
      )
    ));
    return FALSE;
  }

  $key = db_query("SELECT * FROM api_keys WHERE api_key = :api_key LIMIT 1", array(':api_key' => check_plain($_GET['api_key'])))->fetchAssoc();

  if (!is_array($key)) {
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 2,
          "message" => "Invalid API key. You must be granted a valid key."
        )
      )
    ));
    return FALSE;
  }

  if (!$key['active']) {
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 3,
          "message" => "Suspended API key. Access for your account has been suspended."
        )
      )
    ));
    return FALSE;
  }

  return TRUE;
}

function _limit() {
  $limit = DEFAULT_PAGE_LIMIT;
  if (isset($_GET['limit']) && is_numeric($_GET['limit'])) {
    if ($_GET['limit'] > MAXIMUM_PAGE_LIMIT) {
      drupal_add_http_header('Status', '403 Forbidden');
      drupal_json_output(array(
        "errors" => array(
          array(
            "code" => 6,
            "message" => "A maximum of " . MAXIMUM_PAGE_LIMIT . " is allowed as page limit."
          )
        )
      ));
      drupal_exit();
    }
    $limit = $_GET['limit'];
  }

  return $limit;
}

function _api_concert_reviews() {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  $offset = (isset($_GET['offset']) && is_numeric($_GET['offset']) && $_GET['offset'] > 0) ? $_GET['offset'] : 0;
  $limit = _limit();

  // Serve data from cache
  $items = &drupal_static(__FUNCTION__);
  $cache_cid = "api_concert_reviews_{$offset}_{$limit}";
  if (empty($data)) {
    $cache = cache_get($cache_cid);
    if (is_object($cache) && CACHE_ENABLED && REQUEST_TIME < $cache->expire) {
      $items = $cache->data;
    } else {
      $items = _fetch_concert_reviews_from_db($offset, $limit);
      cache_set($cache_cid, $items, 'cache', (REQUEST_TIME + CACHE_LIFETIME_SECONDS));
    }
  }

  $max = _maximum_concert_reviews();
  $last_offset = $max - ($max % $limit);

  $links = array(
    "next" => "<" . url('api/' . API_VERSION . '/concert_reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $offset+$limit, 'limit' => $limit))) . ">; rel=\"next\"",
    "last" => "<" . url('api/' . API_VERSION . '/concert_reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $last_offset, 'limit' => $limit))) . ">; rel=\"last\"",
    "first" => "<" . url('api/' . API_VERSION . '/concert_reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => 0, 'limit' => $limit))) . ">; rel=\"first\"",
  );

  $prev_offset = $offset-$limit;
  if ($prev_offset >= 0) {
    $links['prev'] =  "<" . url('api/' . API_VERSION . '/concert_reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $prev_offset, 'limit' => $limit))) . ">; rel=\"prev\"";
  }

  drupal_add_http_header('Link', implode(", ", $links));

  drupal_json_output(array(
    "data" => $items
  ));
  drupal_exit();
}

function _api_news() {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  $offset = (isset($_GET['offset']) && is_numeric($_GET['offset']) && $_GET['offset'] > 0) ? $_GET['offset'] : 0;
  $limit = _limit();

  // Serve data from cache
  $items = &drupal_static(__FUNCTION__);
  $cache_cid = "api_news_{$offset}_{$limit}";
  if (empty($data)) {
    $cache = cache_get($cache_cid);
    if (is_object($cache) && CACHE_ENABLED && REQUEST_TIME < $cache->expire) {
      $items = $cache->data;
    } else {
      $items = _fetch_news_from_db($offset, $limit);
      cache_set($cache_cid, $items, 'cache', (REQUEST_TIME + CACHE_LIFETIME_SECONDS));
    }
  }

  $max = _maximum_news();
  $last_offset = $max - ($max % $limit);

  $links = array(
    "next" => "<" . url('api/' . API_VERSION . '/news', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $offset+$limit, 'limit' => $limit))) . ">; rel=\"next\"",
    "last" => "<" . url('api/' . API_VERSION . '/news', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $last_offset, 'limit' => $limit))) . ">; rel=\"last\"",
    "first" => "<" . url('api/' . API_VERSION . '/news', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => 0, 'limit' => $limit))) . ">; rel=\"first\"",
  );

  $prev_offset = $offset-$limit;
  if ($prev_offset >= 0) {
    $links['prev'] =  "<" . url('api/' . API_VERSION . '/news', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $prev_offset, 'limit' => $limit))) . ">; rel=\"prev\"";
  }

  drupal_add_http_header('Link', implode(", ", $links));

  drupal_json_output(array(
    "data" => $items
  ));
  drupal_exit();
}

function _api_reportages() {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  $offset = (isset($_GET['offset']) && is_numeric($_GET['offset']) && $_GET['offset'] > 0) ? $_GET['offset'] : 0;
  $limit = _limit();

  // Serve data from cache
  $items = &drupal_static(__FUNCTION__);
  $cache_cid = "api_reportages_{$offset}_{$limit}";
  if (empty($data)) {
    $cache = cache_get($cache_cid);
    if (is_object($cache) && CACHE_ENABLED && REQUEST_TIME < $cache->expire) {
      $items = $cache->data;
    } else {
      $items = _fetch_reportages_from_db($offset, $limit);
      cache_set($cache_cid, $items, 'cache', (REQUEST_TIME + CACHE_LIFETIME_SECONDS));
    }
  }

  $max = _maximum_reportages();
  $last_offset = $max - ($max % $limit);

  $links = array(
    "next" => "<" . url('api/' . API_VERSION . '/reportages', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $offset+$limit, 'limit' => $limit))) . ">; rel=\"next\"",
    "last" => "<" . url('api/' . API_VERSION . '/reportages', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $last_offset, 'limit' => $limit))) . ">; rel=\"last\"",
    "first" => "<" . url('api/' . API_VERSION . '/reportages', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => 0, 'limit' => $limit))) . ">; rel=\"first\"",
  );

  $prev_offset = $offset-$limit;
  if ($prev_offset >= 0) {
    $links['prev'] =  "<" . url('api/' . API_VERSION . '/reportages', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $prev_offset, 'limit' => $limit))) . ">; rel=\"prev\"";
  }

  drupal_add_http_header('Link', implode(", ", $links));

  drupal_json_output(array(
    "data" => $items
  ));
  drupal_exit();
}

function _api_interviews() {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  $offset = (isset($_GET['offset']) && is_numeric($_GET['offset']) && $_GET['offset'] > 0) ? $_GET['offset'] : 0;
  $limit = _limit();

  // Serve data from cache
  $items = &drupal_static(__FUNCTION__);
  $cache_cid = "api_interviews_{$offset}_{$limit}";
  if (empty($data)) {
    $cache = cache_get($cache_cid);
    if (is_object($cache) && CACHE_ENABLED && REQUEST_TIME < $cache->expire) {
      $items = $cache->data;
    } else {
      $items = _fetch_interviews_from_db($offset, $limit);
      cache_set($cache_cid, $items, 'cache', (REQUEST_TIME + CACHE_LIFETIME_SECONDS));
    }
  }

  $max = _maximum_interviews();
  $last_offset = $max - ($max % $limit);

  $links = array(
    "next" => "<" . url('api/' . API_VERSION . '/interviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $offset+$limit, 'limit' => $limit))) . ">; rel=\"next\"",
    "last" => "<" . url('api/' . API_VERSION . '/interviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $last_offset, 'limit' => $limit))) . ">; rel=\"last\"",
    "first" => "<" . url('api/' . API_VERSION . '/interviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => 0, 'limit' => $limit))) . ">; rel=\"first\"",
  );

  $prev_offset = $offset-$limit;
  if ($prev_offset >= 0) {
    $links['prev'] =  "<" . url('api/' . API_VERSION . '/interviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $prev_offset, 'limit' => $limit))) . ">; rel=\"prev\"";
  }

  drupal_add_http_header('Link', implode(", ", $links));

  drupal_json_output(array(
    "data" => $items
  ));
  drupal_exit();
}

function _api_swagger_ui() {
  print theme('swagger_ui');
}

function _api_openapi() {
  header("content-type:text/yaml;charset=utf-8");
  $openapi_file = drupal_get_path('module', 'api') . "/templates/openapi.yaml";
  print file_get_contents($openapi_file);
}

function api_theme($existing, $type, $theme, $path) {
  $functions = array();

  $functions['swagger_ui'] = array(
    'arguments' => array('swagger_schema' => 'swagger.json'),
  );

  return $functions;
}

function theme_swagger_ui($swagger_schema) {
  global $base_url;
  $output = '<!doctype html>
  <html lang="en">
    <head>
      <title>Heavymetal.dk API</title>
      <meta charset="utf-8">
      <link rel="stylesheet" type="text/css" href="//unpkg.com/swagger-ui-dist@3/swagger-ui.css" />
    </head>
    <body>
      <div id="swagger-ui"></div>
      <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js"></script>
      <script type="text/javascript">
      SwaggerUIBundle({
        url: \'' . $base_url . '/api/v1/openapi.yaml\',
        dom_id: \'#swagger-ui\'
      })
      </script>
    </body>
  </html>
  ';
  return $output;
}

function _api_reviews() {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  $offset = (isset($_GET['offset']) && is_numeric($_GET['offset']) && $_GET['offset'] > 0) ? $_GET['offset'] : 0;
  $limit = _limit();

  // Serve data from cache
  $items = &drupal_static(__FUNCTION__);
  $cache_cid = "api_reviews_{$offset}_{$limit}";
  if (empty($data)) {
    $cache = cache_get($cache_cid);
    if (is_object($cache) && CACHE_ENABLED && REQUEST_TIME < $cache->expire) {
      $items = $cache->data;
    } else {
      $items = _fetch_reviews_from_db($offset, $limit);
      cache_set($cache_cid, $items, 'cache', (REQUEST_TIME + CACHE_LIFETIME_SECONDS));
    }
  }

  $max = _maximum_reviews();
  $last_offset = $max - ($max % $limit);

  $links = array(
    "next" => "<" . url('api/' . API_VERSION . '/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $offset+$limit, 'limit' => $limit))) . ">; rel=\"next\"",
    "last" => "<" . url('api/' . API_VERSION . '/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $last_offset, 'limit' => $limit))) . ">; rel=\"last\"",
    "first" => "<" . url('api/' . API_VERSION . '/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => 0, 'limit' => $limit))) . ">; rel=\"first\"",
  );

  $prev_offset = $offset-$limit;
  if ($prev_offset >= 0) {
    $links['prev'] =  "<" . url('api/' . API_VERSION . '/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $prev_offset, 'limit' => $limit))) . ">; rel=\"prev\"";
  }

  drupal_add_http_header('Link', implode(", ", $links));
  drupal_json_output(array(
    "data" => $items
  ));
  drupal_exit();
}

function _fetch_concert_reviews_from_db($offset, $limit) {
  $sql = "SELECT n.nid, p.published_at
FROM node n 
INNER JOIN publication_date p ON p.nid = n.nid
WHERE n.type = :type AND n.status = :status 
ORDER BY p.published_at DESC 
LIMIT {$offset}, {$limit}";

  $rs = db_query($sql, array(':type' => 'concert_review', ':status' => 1));

  $items = array();
  foreach ($rs as $row) {
    $node = node_load($row->nid);
    $items[] = _output_concert_review($node, $row->published_at);
  }
  return $items;
}

function _fetch_interviews_from_db($offset, $limit) {
  $sql = "SELECT n.nid, p.published_at
FROM node n 
INNER JOIN publication_date p ON p.nid = n.nid
WHERE n.type = :type AND n.status = :status 
ORDER BY p.published_at DESC 
LIMIT {$offset}, {$limit}";

  $rs = db_query($sql, array(':type' => 'interview', ':status' => 1));

  $items = array();
  foreach ($rs as $row) {
    $node = node_load($row->nid);
    $items[] = _output_interview($node, $row->published_at);
  }
  return $items;
}

function _fetch_news_from_db($offset, $limit) {
  $sql = "SELECT n.nid, p.published_at
FROM node n 
INNER JOIN publication_date p ON p.nid = n.nid
WHERE n.type = :type AND n.status = :status 
ORDER BY p.published_at DESC 
LIMIT {$offset}, {$limit}";

  $rs = db_query($sql, array(':type' => 'news', ':status' => 1));

  $items = array();
  foreach ($rs as $row) {
    $node = node_load($row->nid);
    $items[] = _output_news($node, $row->published_at);
  }
  return $items;
}

function _fetch_reportages_from_db($offset, $limit) {
  $sql = "SELECT n.nid, p.published_at
FROM node n 
INNER JOIN publication_date p ON p.nid = n.nid
WHERE n.type = :type AND n.status = :status 
ORDER BY p.published_at DESC 
LIMIT {$offset}, {$limit}";

  $rs = db_query($sql, array(':type' => 'reportage', ':status' => 1));

  $items = array();
  foreach ($rs as $row) {
    $node = node_load($row->nid);
    $items[] = _output_reportage($node, $row->published_at);
  }
  return $items;
}

function _fetch_reviews_from_db($offset, $limit) {
  $sql = "SELECT n.nid, p.published_at
FROM node n 
INNER JOIN publication_date p ON p.nid = n.nid
WHERE n.type = :type AND n.status = :status 
ORDER BY p.published_at DESC 
LIMIT {$offset}, {$limit}";

  $rs = db_query($sql, array(':type' => 'review', ':status' => 1));

  $items = array();
  foreach ($rs as $row) {
    $node = node_load($row->nid);
    $items[] = _output_review($node, $row->published_at);
  }
  return $items;
}

function _maximum_reviews() {
  $sql = "SELECT COUNT(n.nid) AS count FROM node n WHERE type = :type AND status = :status";
  $c = db_query($sql, array(':type' => 'review', ':status' => 1))->fetchAssoc();
  return $c['count'];
}

function _maximum_concert_reviews() {
  $sql = "SELECT COUNT(n.nid) AS count FROM node n WHERE type = :type AND status = :status";
  $c = db_query($sql, array(':type' => 'concert_review', ':status' => 1))->fetchAssoc();
  return $c['count'];
}

function _maximum_interviews() {
  $sql = "SELECT COUNT(n.nid) AS count FROM node n WHERE type = :type AND status = :status";
  $c = db_query($sql, array(':type' => 'interview', ':status' => 1))->fetchAssoc();
  return $c['count'];
}

function _maximum_news() {
  $sql = "SELECT COUNT(n.nid) AS count FROM node n WHERE type = :type AND status = :status";
  $c = db_query($sql, array(':type' => 'news', ':status' => 1))->fetchAssoc();
  return $c['count'];
}

function _maximum_reportages() {
  $sql = "SELECT COUNT(n.nid) AS count FROM node n WHERE type = :type AND status = :status";
  $c = db_query($sql, array(':type' => 'reportage', ':status' => 1))->fetchAssoc();
  return $c['count'];
}

function _api_review($nid) {
  _handle_single_node($nid, 'review', '_output_review');
}

function _api_concert_review($nid) {
  _handle_single_node($nid, 'concert_review', '_output_concert_review');
}

function _api_interview($nid) {
  _handle_single_node($nid, 'interview', '_output_interview');
}

function _api_news_story($nid) {
  _handle_single_node($nid, 'news', '_output_news');
}

function _api_reportage($nid) {
  _handle_single_node($nid, 'reportage', '_output_reportage');
}

function _api_artist($nid) {
  _handle_single_node($nid, 'artist', '_output_artist_detailed');
}

function _handle_single_node($nid, $type, $render_function) {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  if (!is_numeric($nid)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 4,
          "message" => "The provided key parameter must be numeric."
        )
      )
    ));
    drupal_exit();
  }

  $node = node_load($nid);
  if (!is_object($node) || $node->type != $type) {
    drupal_add_http_header('Status', '404 Not Found');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 5,
          "message" => "Invalid resource specified."
        )
      )
    ));
    drupal_exit();
  }

  $p = db_query("SELECT published_at FROM publication_date WHERE nid = :nid", array(':nid' => $node->nid))->fetchAssoc();

  // Serve data from cache
  $item = &drupal_static(__FUNCTION__);
  $cache_cid = "api_single_node_{$type}_{$nid}";
  $cache = cache_get($cache_cid);
  if (is_object($cache) && CACHE_ENABLED && REQUEST_TIME < $cache->expire) {
    $item = $cache->data;
  } else {
    $item = $render_function($node, $p['published_at']);
    cache_set($cache_cid, $item, 'cache', (REQUEST_TIME + CACHE_LIFETIME_SECONDS));
  }

  drupal_json_output(array(
    "data" => $item
  ));
  drupal_exit();
}
