<?php

define("API_VERSION", "v1");
define("DEFAULT_PAGE_LIMIT", 25);
define("MAXIMUM_PAGE_LIMIT", 100);

require_once('api.admin.inc');
require_once('api.render.inc');

/**
 * Implements hook_menu().
 */
function api_menu() {

  // API
  $items["api/" . API_VERSION . "/reviews"] = array(
    'page callback' => '_api_reviews',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items["api/" . API_VERSION . "/reviews/%"] = array(
    'page callback' => '_api_review',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Administration
  $items['admin/config/api'] = array(
    'title' => t('REST API'),
    'page callback' => '_api_keys_list',
    'access callback' => TRUE,
    'access arguments' => array('administer api'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'api.admin.inc',
  );
  $items['admin/config/api/add_api_key'] = array(
    'title' => 'Add API key',
    'description' => 'Add a new API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_add_api_key_form'),
    'access arguments' => array('add api key'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  $items['admin/config/api/edit_api_key/%'] = array(
    'title' => 'Edit API key',
    'description' => 'Edit an existing API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_edit_api_key_form', 4),
    'access arguments' => array('edit api key'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  $items['admin/config/api/delete_api_key/%'] = array(
    'title' => 'Delete API key',
    'description' => 'Delete an existing API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delete_api_key_form', 4),
    'access arguments' => array('delete api key'),
    'type' => MENU_CALLBACK,
    'file' => 'api.admin.inc',
  );
  return $items;
}

function _valid_api_key() {

  if (!isset($_GET['api_key'])) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 1,
          "message" => "Invalid parameters. Your request is missing a required parameter."
        )
      )
    ));
    return FALSE;
  }

  $key = db_query("SELECT * FROM api_keys WHERE api_key = :api_key LIMIT 1", array(':api_key' => check_plain($_GET['api_key'])))->fetchAssoc();

  if (!is_array($key)) {
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 2,
          "message" => "Invalid API key. You must be granted a valid key."
        )
      )
    ));
    return FALSE;
  }

  if (!$key['active']) {
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 3,
          "message" => "Suspended API key. Access for your account has been suspended."
        )
      )
    ));
    return FALSE;
  }

  return TRUE;
}

function _limit() {
  $limit = DEFAULT_PAGE_LIMIT;
  if (isset($_GET['limit']) && is_numeric($_GET['limit'])) {
    if ($_GET['limit'] > MAXIMUM_PAGE_LIMIT) {
      drupal_add_http_header('Status', '403 Forbidden');
      drupal_json_output(array(
        "errors" => array(
          array(
            "code" => 6,
            "message" => "A maximum of " . MAXIMUM_PAGE_LIMIT . " is allowed as page limit."
          )
        )
      ));
      drupal_exit();
    }
    $limit = $_GET['limit'];
  }

  return $limit;
}

function _api_reviews() {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  drupal_add_http_header('Content-Type', 'text/plain');

  $offset = (isset($_GET['offset']) && is_numeric($_GET['offset']) && $_GET['offset'] > 0) ? $_GET['offset'] : 0;
  $limit = _limit();

  // Serve data from cache
  $items = &drupal_static(__FUNCTION__);
  $cache_cid = "api_reviews_{$offset}_{$limit}";
  if (empty($data)) {
    if ($cache = cache_get($cache_cid)) {
      $items = $cache->data;
    }
    else {
      $items = _fetch_reviews_from_db($offset, $limit);
      cache_set($cache_cid, $items, 'cache');
    }
  }

  $max = _maximum_reviews();
  $last_offset = $max - ($max % $limit);

  $links = array(
    "next" => "<" . url('api/v1/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $offset+$limit, 'limit' => $limit))) . ">; rel=\"next\"",
    "last" => "<" . url('api/v1/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $last_offset, 'limit' => $limit))) . ">; rel=\"last\"",
    "first" => "<" . url('api/v1/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => 0, 'limit' => $limit))) . ">; rel=\"first\"",
  );

  $prev_offset = $offset-$limit;
  if ($prev_offset >= 0) {
    $links['prev'] =  "<" . url('api/v1/reviews', array('absolute' => TRUE, 'query' => array('api_key' => $_GET['api_key'], 'offset' => $prev_offset, 'limit' => $limit))) . ">; rel=\"prev\"";
  }

  drupal_add_http_header('Link', implode(", ", $links));
  drupal_json_output(array(
    "data" => $items
  ));
  drupal_exit();
}

function _fetch_reviews_from_db($offset, $limit) {
  $sql = "SELECT n.nid, p.published_at
FROM node n 
INNER JOIN publication_date p ON p.nid = n.nid
WHERE n.type = :type AND n.status = :status 
ORDER BY p.published_at DESC 
LIMIT {$offset}, {$limit}";

  $rs = db_query($sql, array(':type' => 'review', ':status' => 1));

  $items = array();
  foreach ($rs as $row) {
    $node = node_load($row->nid);
    $items[] = _output_review($node, $row->published_at);
  }
  return $items;
}

function _maximum_reviews() {
  $sql = "SELECT COUNT(n.nid) AS count FROM node n WHERE type = :type AND status = :status";
  $c = db_query($sql, array(':type' => 'review', ':status' => 1))->fetchAssoc();
  return $c['count'];
}

function _api_review($nid) {
  drupal_add_http_header('Access-Control-Allow-Methods: ', 'GET');

  if (!_valid_api_key()) {
    drupal_exit();
  }

  if (!is_numeric($nid)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 4,
          "message" => "The provided key parameter must be numeric."
        )
      )
    ));
    drupal_exit();
  }

  $node = node_load($nid);
  if (!is_object($node) || $node->type != 'review') {
    drupal_add_http_header('Status', '404 Not Found');
    drupal_json_output(array(
      "errors" => array(
        array(
          "code" => 5,
          "message" => "Invalid resource specified."
        )
      )
    ));
    drupal_exit();
  }

  $p = db_query("SELECT published_at FROM publication_date WHERE nid = :nid", array(':nid' => $node->nid))->fetchAssoc();

  drupal_json_output(array(
    "data" => array(
      _output_review($node, $p['published_at'])
    )
  ));
  drupal_exit();
}
